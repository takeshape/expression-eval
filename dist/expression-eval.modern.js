import n from"jsep";export{default as parse}from"jsep";const r={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},t={"||":function(n,r){return n||r},"&&":function(n,r){return n&&r},"|":function(n,r){return n|r},"^":function(n,r){return n^r},"&":function(n,r){return n&r},"==":function(n,r){return n==r},"!=":function(n,r){return n!=r},"===":function(n,r){return n===r},"!==":function(n,r){return n!==r},"<":function(n,r){return n<r},">":function(n,r){return n>r},"<=":function(n,r){return n<=r},">=":function(n,r){return n>=r},"<<":function(n,r){return n<<r},">>":function(n,r){return n>>r},">>>":function(n,r){return n>>>r},"+":function(n,r){return n+r},"-":function(n,r){return n-r},"*":function(n,r){return n*r},"/":function(n,r){return n/r},"%":function(n,r){return n%r}},e={"-":function(n){return-n},"+":function(n){return+n},"~":function(n){return~n},"!":function(n){return!n}};function i(n,r,i={}){function a(n){return n.map(function(n){return u(n)})}function o(n){const r=u(n.object);if(n.computed)return[r,i.implicitOptionalChaining&&null==r?void 0:r[u(n.property)]];{const t=n.property.name;return[r,i.implicitOptionalChaining&&null==r?void 0:r[t]]}}function u(n){const i=n;switch(i.type){case"ArrayExpression":return a(i.elements);case"BinaryExpression":return t[i.operator](u(i.left),u(i.right));case"CallExpression":let n,c,s;if("MemberExpression"===i.callee.type?(s=o(i.callee),n=s[0],c=s[1]):c=u(i.callee),"function"!=typeof c)return;return c.apply(n,a(i.arguments));case"ConditionalExpression":return u(i.test)?u(i.consequent):u(i.alternate);case"Identifier":return r[i.name];case"Literal":return i.value;case"LogicalExpression":return"||"===i.operator?u(i.left)||u(i.right):"&&"===i.operator?u(i.left)&&u(i.right):t[i.operator](u(i.left),u(i.right));case"MemberExpression":return o(i)[1];case"ThisExpression":return r;case"UnaryExpression":return e[i.operator](u(i.argument));default:return}}return u(n)}async function a(n,r,i={}){async function a(n){return await Promise.all(n.map(n=>u(n)))}async function o(n){const r=await u(n.object);if(n.computed)return[r,i.implicitOptionalChaining&&null==r?void 0:r[await u(n.property)]];{const t=n.property.name;return[r,i.implicitOptionalChaining&&null==r?void 0:r[t]]}}async function u(n){const i=n;switch(i.type){case"ArrayExpression":return await a(i.elements);case"BinaryExpression":{const[n,r]=await Promise.all([u(i.left),u(i.right)]);return t[i.operator](n,r)}case"CallExpression":{let n,r,t;if("MemberExpression"===i.callee.type?(t=await o(i.callee),n=t[0],r=t[1]):r=await u(i.callee),"function"!=typeof r)return;return await r.apply(n,await a(i.arguments))}case"ConditionalExpression":return await u(i.test)?await u(i.consequent):await u(i.alternate);case"Identifier":return r[i.name];case"Literal":return i.value;case"LogicalExpression":{if("||"===i.operator)return await u(i.left)||await u(i.right);if("&&"===i.operator)return await u(i.left)&&await u(i.right);const[n,r]=await Promise.all([u(i.left),u(i.right)]);return t[i.operator](n,r)}case"MemberExpression":return(await o(i))[1];case"ThisExpression":return r;case"UnaryExpression":return e[i.operator](await u(i.argument));default:return}}return u(n)}function o(r){return i.bind(null,n(r))}function u(r){return a.bind(null,n(r))}function c(r,t){n.addUnaryOp(r),e[r]=t}function s(e,i,a){a?(n.addBinaryOp(e,i),t[e]=a):(n.addBinaryOp(e,r[e]||1),t[e]=i)}export{s as addBinaryOp,c as addUnaryOp,o as compile,u as compileAsync,i as eval,a as evalAsync};
//# sourceMappingURL=expression-eval.modern.js.map

{"version":3,"file":"expression-eval.modern.js","sources":["../index.ts"],"sourcesContent":["import jsep from 'jsep';\n\n/**\n * Evaluation code from JSEP project, under MIT License.\n * Copyright (c) 2013 Stephen Oney, http://jsep.from.so/\n */\n\n// Default operator precedence from https://github.com/EricSmekens/jsep/blob/master/src/jsep.js#L55\nconst DEFAULT_PRECEDENCE = {\n  '||': 1,\n  '&&': 2,\n  '|': 3,\n  '^': 4,\n  '&': 5,\n  '==': 6,\n  '!=': 6,\n  '===': 6,\n  '!==': 6,\n  '<': 7,\n  '>': 7,\n  '<=': 7,\n  '>=': 7,\n  '<<': 8,\n  '>>': 8,\n  '>>>': 8,\n  '+': 9,\n  '-': 9,\n  '*': 10,\n  '/': 10,\n  '%': 10\n};\n\nconst binops = {\n  '||': function (a, b) { return a || b; },\n  '&&': function (a, b) { return a && b; },\n  '|': function (a, b) { return a | b; },\n  '^': function (a, b) { return a ^ b; },\n  '&': function (a, b) { return a & b; },\n  '==': function (a, b) { return a == b; }, // jshint ignore:line\n  '!=': function (a, b) { return a != b; }, // jshint ignore:line\n  '===': function (a, b) { return a === b; },\n  '!==': function (a, b) { return a !== b; },\n  '<': function (a, b) { return a < b; },\n  '>': function (a, b) { return a > b; },\n  '<=': function (a, b) { return a <= b; },\n  '>=': function (a, b) { return a >= b; },\n  '<<': function (a, b) { return a << b; },\n  '>>': function (a, b) { return a >> b; },\n  '>>>': function (a, b) { return a >>> b; },\n  '+': function (a, b) { return a + b; },\n  '-': function (a, b) { return a - b; },\n  '*': function (a, b) { return a * b; },\n  '/': function (a, b) { return a / b; },\n  '%': function (a, b) { return a % b; }\n};\n\nconst unops = {\n  '-': function (a) { return -a; },\n  '+': function (a) { return +a; },\n  '~': function (a) { return ~a; },\n  '!': function (a) { return !a; },\n};\n\ndeclare type operand = number | string;\ndeclare type unaryCallback = (a: operand) => operand;\ndeclare type binaryCallback = (a: operand, b: operand) => operand;\n\ntype AnyExpression = jsep.ArrayExpression\n  | jsep.BinaryExpression\n  | jsep.MemberExpression\n  | jsep.CallExpression\n  | jsep.ConditionalExpression\n  | jsep.Identifier\n  | jsep.Literal\n  | jsep.LogicalExpression\n  | jsep.ThisExpression\n  | jsep.UnaryExpression;\n\ndeclare interface EvaluateOptions {\n  implicitOptionalChaining?: boolean;\n}\n\nfunction evaluate(_node: jsep.Expression, context: object, options: EvaluateOptions = {}) {\n\n  function evaluateArray(list) {\n    return list.map(function (v) { return evaluateNode(v); });\n  }\n\n  function evaluateMember(node: jsep.MemberExpression) {\n    const object = evaluateNode(node.object);\n    if (node.computed) {\n      return [object, object[evaluateNode(node.property)]];\n    } else {\n      const name = (node.property as jsep.Identifier).name;\n      return [object, options.implicitOptionalChaining ? object?.[name] : object[name]]\n    }\n  }\n\n  function evaluateNode(_jsepNode: jsep.Expression) {\n\n    const node = _jsepNode as AnyExpression;\n\n    switch (node.type) {\n\n      case 'ArrayExpression':\n        return evaluateArray(node.elements);\n\n      case 'BinaryExpression':\n        return binops[node.operator](evaluateNode(node.left), evaluateNode(node.right));\n\n      case 'CallExpression':\n        let caller, fn, assign;\n        if (node.callee.type === 'MemberExpression') {\n          assign = evaluateMember(node.callee as jsep.MemberExpression);\n          caller = assign[0];\n          fn = assign[1];\n        } else {\n          fn = evaluateNode(node.callee);\n        }\n        if (typeof fn !== 'function') { return undefined; }\n        return fn.apply(caller, evaluateArray(node.arguments));\n\n      case 'ConditionalExpression':\n        return evaluateNode(node.test)\n          ? evaluateNode(node.consequent)\n          : evaluateNode(node.alternate);\n\n      case 'Identifier':\n        return context[node.name];\n\n      case 'Literal':\n        return node.value;\n\n      case 'LogicalExpression':\n        if (node.operator === '||') {\n          return evaluateNode(node.left) || evaluateNode(node.right);\n        } else if (node.operator === '&&') {\n          return evaluateNode(node.left) && evaluateNode(node.right);\n        }\n        return binops[node.operator](evaluateNode(node.left), evaluateNode(node.right));\n\n      case 'MemberExpression':\n        return evaluateMember(node)[1];\n\n      case 'ThisExpression':\n        return context;\n\n      case 'UnaryExpression':\n        return unops[node.operator](evaluateNode(node.argument));\n\n      default:\n        return undefined;\n    }\n  }\n\n  return evaluateNode(_node);\n}\n\nasync function evalAsync(_node: jsep.Expression, context: object, options: EvaluateOptions = {}) {\n\n  async function evaluateArrayAsync(list) {\n    const res = await Promise.all(list.map((v) => evalAsyncNode(v)));\n    return res;\n  }\n\n  async function evaluateMemberAsync(node: jsep.MemberExpression) {\n    const object = await evalAsyncNode(node.object);\n    if (node.computed) {\n      return [object, object[await evalAsyncNode(node.property)]];\n    } else {\n      const name = (node.property as jsep.Identifier).name;\n      return [object, options.implicitOptionalChaining ? object?.[name] : object[name]]\n    }\n  }\n\n  async function evalAsyncNode(jsepNode: jsep.Expression) {\n    const node = jsepNode as AnyExpression;\n\n    // Brackets used for some case blocks here, to avoid edge cases related to variable hoisting.\n    // See: https://stackoverflow.com/questions/57759348/const-and-let-variable-shadowing-in-a-switch-statement\n    switch (node.type) {\n\n      case 'ArrayExpression':\n        return await evaluateArrayAsync(node.elements);\n\n      case 'BinaryExpression': {\n        const [left, right] = await Promise.all([\n          evalAsyncNode(node.left),\n          evalAsyncNode(node.right)\n        ]);\n        return binops[node.operator](left, right);\n      }\n\n      case 'CallExpression': {\n        let caller, fn, assign;\n        if (node.callee.type === 'MemberExpression') {\n          assign = await evaluateMemberAsync(node.callee as jsep.MemberExpression);\n          caller = assign[0];\n          fn = assign[1];\n        } else {\n          fn = await evalAsyncNode(node.callee);\n        }\n        if (typeof fn !== 'function') {\n          return undefined;\n        }\n        return await fn.apply(\n          caller,\n          await evaluateArrayAsync(node.arguments)\n        );\n      }\n\n      case 'ConditionalExpression':\n        return (await evalAsyncNode(node.test))\n          ? await evalAsyncNode(node.consequent)\n          : await evalAsyncNode(node.alternate);\n\n      case 'Identifier':\n        return context[node.name];\n\n      case 'Literal':\n        return node.value;\n\n      case 'LogicalExpression': {\n        if (node.operator === '||') {\n          return (\n            (await evalAsyncNode(node.left)) ||\n            (await evalAsyncNode(node.right))\n          );\n        } else if (node.operator === '&&') {\n          return (\n            (await evalAsyncNode(node.left)) &&\n            (await evalAsyncNode(node.right))\n          );\n        }\n\n        const [left, right] = await Promise.all([\n          evalAsyncNode(node.left),\n          evalAsyncNode(node.right)\n        ]);\n\n        return binops[node.operator](left, right);\n      }\n\n      case 'MemberExpression':\n        return (await evaluateMemberAsync(node))[1];\n\n      case 'ThisExpression':\n        return context;\n\n      case 'UnaryExpression':\n        return unops[node.operator](await evalAsyncNode(node.argument));\n\n      default:\n        return undefined;\n    }\n  }\n\n  return evalAsyncNode(_node);\n}\n\nfunction compile(expression: string | jsep.Expression): (context: object) => any {\n  return evaluate.bind(null, jsep(expression));\n}\n\nfunction compileAsync(expression: string | jsep.Expression): (context: object) => Promise<any> {\n  return evalAsync.bind(null, jsep(expression));\n}\n\n// Added functions to inject Custom Unary Operators (and override existing ones)\nfunction addUnaryOp(operator: string, _function: unaryCallback): void {\n  jsep.addUnaryOp(operator);\n  unops[operator] = _function;\n}\n\n// Added functions to inject Custom Binary Operators (and override existing ones)\nfunction addBinaryOp(operator: string, precedence_or_fn: number | binaryCallback, _function: binaryCallback): void {\n  if (_function) {\n    jsep.addBinaryOp(operator, precedence_or_fn as number);\n    binops[operator] = _function;\n  } else {\n    jsep.addBinaryOp(operator, DEFAULT_PRECEDENCE[operator] || 1);\n    binops[operator] = precedence_or_fn;\n  }\n}\n\nexport {\n  jsep as parse,\n  evaluate as eval,\n  evalAsync,\n  compile,\n  compileAsync,\n  addUnaryOp,\n  addBinaryOp\n};\n"],"names":["DEFAULT_PRECEDENCE","||","&&","|","^","&","==","!=","===","!==","<",">","<=",">=","<<",">>",">>>","+","-","*","/","%","binops","a","b","unops","~","!","evaluate","_node","context","options","evaluateArray","list","map","v","evaluateNode","evaluateMember","node","object","computed","property","name","implicitOptionalChaining","_jsepNode","type","elements","operator","left","right","caller","fn","assign","callee","apply","arguments","test","consequent","alternate","value","argument","async","evalAsync","evaluateArrayAsync","Promise","all","evalAsyncNode","evaluateMemberAsync","jsepNode","compile","expression","bind","jsep","compileAsync","addUnaryOp","_function","addBinaryOp","precedence_or_fn"],"mappings":"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"}